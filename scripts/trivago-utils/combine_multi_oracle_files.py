# combine_multi_oracle_files -- Combines several moracle files together generated by the estimate_multi_oracles script.
# @author Saad Mahamood


import argparse
import os
import os.path


def parse_arguments():
    parser = argparse.ArgumentParser()
    parser.add_argument('-d', '--directory', help='Input Directory to process', required=True)
    parser.add_argument('-t', '--title', help='Title file', required=True)
    parser.add_argument('-mc', '--max_count', help='Maximum file count', required=True)
    parser.add_argument('-ft', '--file_type', help='File type to process', required=True)

    args = parser.parse_args()

    input_directory = args.directory
    title = args.title
    max_file_count = args.max_count
    file_type = args.file_type

    if os.path.isdir(input_directory) and os.path.isfile(title):
        print("*** Processing directory...")
        title_list = process_title_file(title)
        print("*** Number of titles found {}".format(len(title_list)))

        process_directory(input_directory, max_file_count, file_type, title_list)

def process_title_file(title):
    title_list = []

    with open(title) as title_file:
        file_lines = title_file.readlines()

        for line in file_lines:
            if line.startswith("usp"):
                title_list.append(line)

    return title_list


def process_directory(input_directory, max_file_count, file_type, title_list):

    output_file = open(input_directory + "/usp." + file_type + ".label.multipleoracle", "w")
    moracle_filename = "-0-src-" + file_type + "-txt.moracle"
    fsent_filename = "-0-src-" + file_type + "-txt.f-sent"

    for line_count, title in enumerate(title_list):
        if line_count <= int(max_file_count) and os.path.isfile(input_directory + str(line_count) + moracle_filename):
            moracle_file = open(input_directory + str(line_count) + moracle_filename)
            fsent_file = open(input_directory  + str(line_count) + fsent_filename)

            output_file.write(title)

            fsent_count = calculate_fsent(fsent_file)
            moracle_file_lines = moracle_file.readlines()

            output_file.write(str(fsent_count) + "\n")
            for moracle_line in moracle_file_lines:
                output_file.write(moracle_line)
        output_file.write("\n")

    print("*** Output file generated.")
    output_file.close()



def calculate_fsent(fsent_file):
    fsent_lines = fsent_file.readlines()
    fsent_count = 0

    for line in fsent_lines:
        tokens = line.split()
        fvalue = float(tokens[0])

        if fvalue > float(0.0):
            fsent_count += 1

    return fsent_count







def main():
    parse_arguments()


if __name__ == '__main__':
    main()